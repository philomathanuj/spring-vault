Setting up Vault on Ubuntu:
------------------------------
1. Create a Downloads folder and download the linux vault package:

wget https://releases.hashicorp.com/vault/1.4.1/vault_1.4.1_linux_amd64.zip

2. Unzip the package:
unzip vault_1.4.1_linux_amd64.zip

3. Then, move the installation package by typing the following command:
sudo cp -avr ~/Downloads/vault /user/bin

4. install helpers in bashrc
vault -autocomplete-install
then restart your shell.

5. Run Vault Dev Server:
vault server -dev
Output below: Notice that we need to remember unseal key:
--------@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory
and starts unsealed with a single unseal key. The root token is already
authenticated to the CLI, so you can immediately begin using Vault.

You may need to set the following environment variable:

    $ export VAULT_ADDR='http://127.0.0.1:8200'

The unseal key and root token are displayed below in case you want to
seal/unseal the Vault or re-authenticate.

Unseal Key: +ezOwMcEnOV6KAN3ELZvDEgpWOe+jcotieZeQ+IfGYg=
Root Token: s.06JqXITieUEVUh9OITDSdgnA

Development mode should NOT be used in production installations!
-----------------@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
6. 
Copy and run the export VAULT_ADDR ... command from the terminal output. This will configure the Vault client to talk to our dev server
export VAULT_ADDR='http://127.0.0.1:8200'

7. 
Copy the generated Root Token value and set it as VAULT_DEV_ROOT_TOKEN_ID environment variable:
export VAULT_DEV_ROOT_TOKEN_ID="s.06JqXITieUEVUh9OITDSdgnA"
8. Now verify that the server is running using below:
vault status
9. 
Let's start by writing a secret. This is done very simply with the vault kv command, as shown below:
vault kv put secret/hello foo=world

This writes the pair foo=world to the path secret/hello. We'll cover paths in more detail later, but for now it is important that the path is prefixed with secret/, otherwise this example won't work. The secret/ prefix is where arbitrary secrets can be read and written.

10.
You can even write multiple pieces of data, if you want:
vault kv put secret/hello foo=world excited=yes

11. Get secrets from vault:
As you might expect, secrets can be gotten with vault get:
vault kv get secret/hello

To print only the value of a given field:
vault kv get -field=excited secret/hello

> Optional JSON output is very useful for scripts. For example below we use the jq tool to extract the value of the excited secret:
vault kv get -format=json secret/hello | jq -r .data.data.excited

12. Deleting a secret:
------------
Now that we've learned how to read and write a secret, let's go ahead and delete it. We can do this with vault delete:

vault kv delete secret/hello

13. 
The path prefix tells Vault which secrets engine to which it should route traffic. When a request comes to Vault, it matches the initial path part using a longest prefix match and then passes the request to the corresponding secrets engine enabled at that path. Vault presents these secrets engines similar to a filesystem.
this won't work and in last example secret was in engine
vault kv put foo/bar a=b
By default, Vault enables Key/Value version2 secrets engine (kv-v2) at the path secret/ when running in dev mode. The key/value secrets engine reads and writes raw data to the backend storage. Vault supports many other secrets engines, and this feature makes Vault flexible and unique.

14. Enable a Secrets Engine

To get started, enable the kv secrets engine. Each path is completely isolated and cannot talk to other paths. For example, a kv secrets engine enabled at foo has no ability to communicate with a kv secrets engine enabled at bar.
$ vault secrets enable -path=kv kv

The path where the secrets engine is enabled defaults to the name of the secrets engine. Thus, the following command is equivalent to executing the above command.

To verify our success and get more information about the secrets engine, use the vault secrets list command:
$ vault secrets list
Let's write a secret to it and then read it:
$ vault kv put kv/hello target=world
$ vault kv get kv/hello

15.
Creat secrets at the kv/my-secret path.
$ vault kv put kv/my-secret value="s3c(eT"

Read the secrets at kv/my-secret.
$ vault kv get kv/my-secret

Delete the secrets at kv/my-secret
$ vault kv delete kv/my-secret

List existing keys at the kv path.

$ vault kv list kv/

16.
Disable a Secrets Engine:
When a secrets engine is no longer needed, it can be disabled. When a secrets engine is disabled, all secrets are revoked and the corresponding Vault data and configuration is removed
$ vault secrets disable kv/
Note that this command takes a PATH to the secrets engine as an argument, not the TYPE of the secrets engine.
Any requests to route data to the original path would result in an error, but another secrets engine could now be enabled at that path.
As mentioned above, Vault behaves similarly to a virtual filesystem. The read/write/delete/list operations are forwarded to the corresponding secrets engine, and the secrets engine decides how to react to those operations.

This abstraction is incredibly powerful. It enables Vault to interface directly with physical systems, databases, HSMs, etc. But in addition to these physical systems, Vault can interact with more unique environments like AWS IAM, dynamic SQL user creation, etc. all while using the same read/write interface.
--------------------------------------------
Demo:
----------
UI: http://127.0.0.1:8200/ui/vault/secrets/secret/configuration
----------------

https://spring.io/guides/gs/vault-config/

vault server --dev --dev-root-token-id="00000000-0000-0000-0000-000000000000"

In a new terminal:
----------------
Store configuration in vault:
-----------
$ export VAULT_TOKEN="00000000-0000-0000-0000-000000000000"
$ export VAULT_ADDR="http://127.0.0.1:8200"

Now store key value paris inside vault:
--------------------

1. with no spring profile: ensure that spring.application.name in bootstrap.properties is vault-app i.e. secret/{spring.application.name}
--------
$ vault kv put secret/vault-app  example.username=demouser example.password=demopassword 

To show above properties:
mvn spring-boot:run

2. with cloud spring profile: when spring.profiles.active=cloud then secrets will be read from secret/{spring.application.name}/{spring.profiles.active}
$ vault kv put secret/vault-app/cloud example.username=clouduser example.password=cloudpassword
To show properties specific to cloud profile
--------------
mvn spring-boot:run -Dspring-boot.run.profiles=cloud

--------------------------
1.
vault server -config=vault.conf
2. On a new terminal:
Â»Initializing the Vault
philomathanuj@philomathanuj-Inspiron-5570:~/hashicorp-vault$ vault operator init
Unseal Key 1: /LTrR0i+IA6/GDtwIqZTxdEtKlpkDP12fTD/LWVf6rj8
Unseal Key 2: sl04CIBgDbG62KcSrSDyoutPoIiQPm2OIFQuesu0nRoD
Unseal Key 3: 9wR6adGufZoNF7aYNMITFpL6ZnHiD9YMOy/hj8LwVi+x
Unseal Key 4: z36SW4fy3nXpjjzznpKkqze263r/w2buhYQxGHioLyIt
Unseal Key 5: 84FM/7DI1GOhOfPqqeBbKHC/ppGSrdgY6I+DUrY+UI/G

Initial Root Token: s.f0t9lrfdHwC1O7IXhZ95xwwC

Vault initialized with 5 key shares and a key threshold of 3. Please securely
distribute the key shares printed above. When the Vault is re-sealed,
restarted, or stopped, you must supply at least 3 of these keys to unseal it
before it can start servicing requests.

Vault does not store the generated master key. Without at least 3 key to
reconstruct the master key, Vault will remain permanently sealed!

Every initialized Vault server starts in the sealed state. From the configuration, Vault can access the physical storage, but it can't read any of it because it doesn't know how to decrypt it. The process of teaching Vault how to decrypt the data is known as unsealing the Vault.

$ vault operator unseal

Unseal Key (will be hidden): 
Key                Value
---                -----
Seal Type          shamir
Initialized        true
Sealed             true
Total Shares       5
Threshold          3
Unseal Progress    1/3
Unseal Nonce       8285687e-61e5-895c-1ee2-d3498c87d7ff
Version            1.4.1
HA Enabled         true

	After pasting in a valid key and confirming, you'll see that the Vault is still sealed, but progress is made. Vault knows it has 1 key out of 3. Due to the nature of the algorithm, Vault doesn't know if it has the correct key until the threshold is reached.

Now let's complete unsealing with other keys

Unseal Key (will be hidden): 
Key                    Value
---                    -----
Seal Type              shamir
Initialized            true
Sealed                 false
Total Shares           5
Threshold              3
Version                1.4.1
Cluster Name           vault-cluster-3ae6f41b
Cluster ID             3c1b6074-2bef-dce7-7b99-4c4ded07cccc
HA Enabled             true
HA Cluster             n/a
HA Mode                standby
Active Node Address    <none>

3. Finally, let's login to the vault using root token:

vault login s.f0t9lrfdHwC1O7IXhZ95xwwC

4. As a root user, you can reseal the Vault with vault operator seal. A single operator is allowed to do this. This lets a single operator lock down the Vault in an emergency without consulting other operators.
vault operator seal

After sealing vault, you can't login to it even with root token unless you unseal it again:
vault login s.f0t9lrfdHwC1O7IXhZ95xwwC
Error authenticating: error looking up token: Error making API request.

URL: GET http://127.0.0.1:8200/v1/auth/token/lookup-self
Code: 503. Errors:

* Vault is sealed

5. Now after unsealing the vault, let's login to it again and put in it some secrets:
vault login s.f0t9lrfdHwC1O7IXhZ95xwwC

vault kv put secret/vault-app  example.username=demouser example.password=demopassword 

vault kv put secret/vault-app/cloud example.username=clouduser example.password=cloudpassword

But you will get an error as you have not defined policy:
-----------------
Error making API request.

URL: GET http://127.0.0.1:8200/v1/sys/internal/ui/mounts/secret/vault-app
Code: 403. Errors:

* preflight capability check returned 403, please ensure client's policies grant access to path "secret/vault-app/"
You need to enable kv secret engine:
vault secrets enable -path=secret/ kv
Now put commands will work fine.

6. In non-dev mode, you need to explicitly enable ui by adding the following property:
ui = true

New values:
-------
root token: s.opKvLMZ6W0Rr9vTo6mkIhfVf
unseal keys:
--------
5+IsNl0UPhezO7pkvGRM8aA1I/KBRvQfLjcqES207WRC
vbiMw1HtOICMf3ymDDQFh+5nTKbgrrrR5pAxvUZY4J1p
bNkKnSwjTUqGxRzeZFjxmO7Ko3hinEFtvgpACDeoH7Lm
9/T8fc9ArjTjeq5O+PhUz7VMW+s5EirSKu9nFlxKmkbv
sYDv7EcmxmUNTV/m/TiGtdbqzrTg9Put9GaFWde8DmYE



















